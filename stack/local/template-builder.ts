import fs from 'fs';
import path from 'path';

import express from 'express';
// eslint-disable-next-line import/no-extraneous-dependencies
import ws from 'ws';

import { GenerateInvoiceHtmlCommand } from '@/backend/cqrs/generate-invoice-html/generate-invoice-html.command';
import { GenerateInvoiceHtmlHandler } from '@/backend/cqrs/generate-invoice-html/generate-invoice-html.handler';
import { InvoiceEntity, InvoiceType } from '@/backend/entities/invoice.entity';

const invoice = {
	subject: 'Test Invoice PDF',
	invoiceNumber: 'RE-2021-0001',
	invoicedAt: new Date(),
	dueAt: new Date(),
	type: InvoiceType.INVOICE,
	customer: {
		customerNumber: 'C-2023-0001',
		showContact: true,
		contactName: 'John Doe',
		name: 'Doe Inc.',
		street: 'Test Address',
		zip: '12345',
		city: 'Test City',
		country: 'Test Country',
	},
	items: [
		{
			id: '1',
			name: 'Consulting',
			description: `Defining the requirements for an invoicing system based on Serverless Technologies.
			Requirements for the system:
			- Create & Send Invoices as Email & PDF
			- Manage Expenses, Products and Customers
			- Hostable Serverless with minimal monthly idle costs`,
			quantity: 3,
			priceCents: 150000,
			taxPercentage: 19,
		},
		{
			id: '2',
			name: 'Software Development',
			description: `Writing an invoicing system based on Serverless Technologies
			Technologies used:
			- AWS Lambda
			- AWS S3
			- AWS SES
			- AWS EventBridge
			- AWS DynamoDB
			- AWS CloudFront
			- AWS CloudFormation
			
			in Developer-Days`,
			quantity: 11,
			priceCents: 100000,
			taxPercentage: 19,
		},
		{
			id: '3',
			name: 'Short time Support',
			description:
				'This item is short. It should not be longer then 2-3 lines. (Minutes)',
			quantity: 999,
			priceCents: 10,
			taxPercentage: 7,
		},
		{
			id: '4',
			name: 'Expenditures',
			description:
				'Developers eat snacks and fastfood. This is a test item for expenditures. Unit: Cheesburgers',
			quantity: 40,
			priceCents: 199,
			taxPercentage: 6,
		},
		{
			id: '5',
			name: 'Conditions',
			description: `The following conditions apply:
				- This is a test invoice
				- The invoice is not valid
				- The invoice is not payable
				- The invoice is not refundable
				- The invoice is not valid for tax reduction
				- The invoice is not valid for tax refund
				- The invoice is not valid for tax deduction
				- The invoice is not valid for tax exemption
				- this text was generated by copilot
				`,
			quantity: 0,
			priceCents: 0,
			taxPercentage: 0,
		},
	],
	footerText: `This is a footer text. It can be used to add additional information to the invoice.
	This invoice is not payable within 14 days. Do not pay the money to the bank account mentioned in the footer.
	We will not accept your money.
	
	This is a test invoice. We are not a real company according to ยง1234 Secion a of the law of the universal tax law.
	`,
} as InvoiceEntity;

const company = {
	name: 'Test Company',
	street: 'Test Street',
	zip: '12345',
	city: 'Test City',
	country: 'Test Country',
	email: 'you@company.com',
	phone: '+49 123 456 789 01',
	web: 'www.company.com',
	taxId: 'DE123456789',
	vatId: 'DE123456789',
	bank: {
		accountHolder: 'Test Company',
		iban: 'DE12 3456 7891 2345 67',
		bic: 'MYTESTBIC',
	},
};

const connections: ws[] = [];

const execute = async (amountItems = -1, tax = true) => {
	const handler = new GenerateInvoiceHtmlHandler();
	const { html } = await handler.execute({
		invoice: {
			...invoice,
			items: (amountItems >= 0
				? invoice.items.slice(0, amountItems)
				: invoice.items
			).map((item) => ({
				...item,
				taxPercentage: tax ? item.taxPercentage : 0,
			})),
		},
		logoUrl: 'https://via.placeholder.com/150',
		template: fs
			.readFileSync(path.resolve('./invoice-template-example.html'))
			.toString(),
		styles: fs
			.readFileSync(path.resolve('./invoice-template-example.css'))
			.toString(),
		company,
	} as GenerateInvoiceHtmlCommand['request']);
	return html;
};
fs.watch(path.resolve('./'), { recursive: true }, (operation, file) => {
	if (
		!file ||
		!['invoice-template-example.html', 'invoice-template-example.css'].includes(
			file,
		) ||
		operation !== 'change'
	) {
		return;
	}
	connections.forEach((connection) => {
		connection.send('reload');
	});
});

const port = Number.parseInt(`${process.env.PORT || 2998}`);
const app = express();
const wss = new ws.Server({ port: port + 1 });

app.get('/', async (req, res) => {
	// Get query parameter ?items=1 to render only one item
	const amountItems = Number.parseInt(`${req.query?.items || -1}`);
	const tax = req.query?.tax !== 'false';
	const compiledTemplate = await execute(amountItems, tax);
	res.send(
		compiledTemplate.replace(
			'<head>',
			'<head><script type="text/javascript" src="/reload.js"></script>',
		),
	);
	res.end();
});

app.get('/reload.js', (_, res) => {
	res.send(
		`
		const socket = new WebSocket('ws://localhost:${port + 1}');
		socket.addEventListener('message', (event) => {
			if (event.data === 'reload') {
				window.location.reload();
			}
		});
	`,
	);
});

wss.on('connection', (ws) => {
	connections.push(ws);
	ws.send('welcome');
});

app.listen(port, () => {
	console.log(`Listening on http://localhost:${port}`);
});
