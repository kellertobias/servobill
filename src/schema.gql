# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attachment {
  createdAt: DateTime!
  expenseId: String
  fileName: String!
  id: ID!
  inventoryId: String
  invoiceId: String
  mimeType: String!
  s3Bucket: String!
  s3Key: String!
  size: Int!
  status: String!
  updatedAt: DateTime!
}

type AttachmentDownloadUrlResult {
  downloadUrl: String!
}

type AuthCheckResult {
  authenticated: Boolean!
  profilePictureUrl: String
  refreshable: Boolean!
  userName: String
}

input CreateInventoryLocationInput {
  barcode: String
  name: String!
}

input CreateInventoryTypeInput {
  checkInterval: Int
  checkType: String
  name: String!
  parent: String
  properties: [String!]
}

type Customer {
  city: String
  contactName: String
  country: String
  createdAt: DateTime!
  customerNumber: String!
  email: String
  id: String!
  name: String!
  notes: String
  showContact: Boolean!
  state: String
  street: String
  updatedAt: DateTime!
  zip: String
}

input CustomerInput {
  city: String
  contactName: String
  country: String
  customerNumber: String
  email: String
  name: String!
  notes: String
  showContact: Boolean!
  state: String
  street: String
  zip: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Expense {
  attachments: [Attachment!]

  """The full category object assigned to this expense."""
  category: ExpenseCategoryType

  """The ID of the expense category assigned to this expense."""
  categoryId: String
  createdAt: DateTime!
  description: String
  expendedAt: DateTime!
  expendedCents: Int!
  id: String!
  name: String!
  notes: String
  taxCents: Int
  updatedAt: DateTime!
}

input ExpenseCategoryInputType {
  categoryId: String
  color: String
  description: String
  isDefault: Boolean
  name: String!
  reference: String
  sumForTaxSoftware: Boolean
}

type ExpenseCategoryType {
  color: String
  description: String
  id: String!
  isDefault: Boolean
  name: String!
  reference: String
  sumForTaxSoftware: Boolean
}

input ExpenseInput {
  attachmentIds: [String!]

  """The ID of the expense category assigned to this expense."""
  categoryId: String
  description: String
  expendedAt: DateTime!
  expendedCents: Int!
  name: String!
  notes: String
  taxCents: Int
}

input ExpenseWhereInput {
  search: String
  year: Int
}

input ExtractReceiptInput {
  """An array of attachment IDs to process."""
  attachmentIds: [String!]

  """Text content to process (e.g., from an email)."""
  text: String
}

type ExtractReceiptResult {
  eventIds: [String!]!
  message: String!
}

type GetContextResult {
  contextString: String!
}

type IncomeSurplusReport {
  endDate: DateTime!
  expensesCents: Int!
  expensesTaxCents: Int!
  incomeCents: Int!
  invoiceTaxCents: Int!
  items: [IncomeSurplusReportItem!]!
  openCents: Int!
  openInvoices: Int!
  overdueCents: Int!
  overdueInvoices: Int!
  startDate: DateTime!
  surplusCents: Int!
}

type IncomeSurplusReportItem {
  category: ExpenseCategoryType
  description: String
  id: String!
  name: String!
  surplusCents: Int!
  taxCents: Int!
  type: String!
  valutaDate: DateTime!
}

input IncomeSurplusReportWhereInput {
  endDate: DateTime!
  startDate: DateTime!
}

"""The state of a check for an inventory item"""
enum InventoryCheckState {
  FAIL
  PASS
  RECHECK
}

"""The type of history entry for an inventory item"""
enum InventoryHistoryType {
  CHECK
  NOTE
  STATE_CHANGE
}

type InventoryItem {
  barcode: String
  createdAt: DateTime!
  history: [InventoryItemHistory!]!
  id: String!
  lastScanned: DateTime!
  location: InventoryLocationInfo
  name: String
  nextCheck: DateTime!
  properties: [InventoryItemProperty!]!
  state: InventoryItemState!
  type: InventoryTypeInfo
  updatedAt: DateTime!
}

type InventoryItemHistory {
  date: DateTime!
  note: String
  state: InventoryCheckState
  type: InventoryHistoryType!
}

input InventoryItemInput {
  barcode: String
  locationId: String
  name: String
  nextCheck: DateTime
  properties: [InventoryItemPropertyInput!]
  state: InventoryItemState
  typeId: String
}

type InventoryItemProperty {
  key: String!
  value: String!
}

input InventoryItemPropertyInput {
  key: String!
  value: String!
}

"""The state of an inventory item"""
enum InventoryItemState {
  BROKEN
  DEFAULT
  NEW
  REMOVED
}

input InventoryItemWhereInput {
  barcode: String
  locationId: String
  overdue: Boolean
  search: String
  state: InventoryItemState
  typeId: String
}

type InventoryLocation {
  barcode: String
  children: [InventoryLocation!]
  createdAt: DateTime!
  id: String!
  itemCount: Float
  items: [InventoryItem!]
  name: String!
  parent: String
  updatedAt: DateTime!
}

type InventoryLocationInfo {
  id: String!
  name: String!
}

input InventoryLocationWhereInput {
  barcode: String
  search: String
}

type InventoryType {
  checkInterval: Int
  checkType: String
  children: [InventoryType!]
  createdAt: DateTime!
  id: String!
  itemCount: Int!
  items: [InventoryItem!]
  name: String!
  parent: String
  properties: [String!]!
  updatedAt: DateTime!
}

type InventoryTypeInfo {
  checkInterval: Int
  checkType: String
  id: String!
  name: String!
}

input InventoryTypeWhereInput {
  parent: String
  rootOnly: Boolean
  search: String
}

type Invoice {
  activity: [InvoiceActivity!]!
  contentHash: String
  createdAt: DateTime!
  customer: Customer!
  dueAt: DateTime
  footerText: String
  id: String!
  invoiceNumber: String
  invoicedAt: DateTime
  items: [InvoiceItem!]!
  links: InvoiceLinks
  offerNumber: String
  offeredAt: DateTime
  paidAt: DateTime
  paidCents: Int
  paidVia: String
  status: InvoiceStatus!
  subject: String
  submissions: [InvoiceSubmissions!]!
  totalCents: Int!
  totalTax: Int!
  type: InvoiceType!
  updatedAt: DateTime!
}

type InvoiceActivity {
  activityAt: DateTime!
  attachToEmail: Boolean

  """The linked attachment details, if any"""
  attachment: Attachment
  id: String!
  notes: String
  type: InvoiceActivityType!
  user: String
}

input InvoiceActivityInput {
  activityAt: DateTime!
  attachToEmail: Boolean
  attachmentId: String
  id: String
  notes: String
  type: InvoiceActivityType!
  user: String
}

"""Type of Activity Log entry"""
enum InvoiceActivityType {
  ARCHIVE_INVOICE
  ARCHIVE_OFFER
  ATTACHMENT
  CANCEL_INVOICE
  CANCEL_OFFER
  CONVERT_TO_INVOICE
  CREATED_INVOICE
  CREATED_OFFER
  EMAIL_BOUNCED
  EMAIL_DELIVERED
  EMAIL_SENT
  IMPORTED
  NOTE
  PAID
  PAYMENT
  SENT_INVOICE_EMAIL
  SENT_INVOICE_LETTER
  SENT_INVOICE_MANUALLY
  SENT_OFFER_EMAIL
  SENT_OFFER_LETTER
  SENT_OFFER_MANUALLY
  UPDATED
}

type InvoiceChangedResponse {
  activityId: String!
  change: InvoiceActivityType!
  id: String!
  updatedAt: DateTime!
}

input InvoiceImportInput {
  activity: [InvoiceActivityInput!]
  customerId: String!
  dueAt: DateTime
  footerText: String
  invoiceNumber: String
  invoicedAt: DateTime
  items: [InvoiceItemInput!]
  offerNumber: String
  offeredAt: DateTime
  paidAt: DateTime
  paidCents: Int
  paidVia: String
  status: InvoiceStatus
  subject: String
  type: InvoiceType!
}

input InvoiceInput {
  customerId: String!
  dueAt: DateTime
  footerText: String
  invoicedAt: DateTime
  items: [InvoiceItemInput!]!
  offeredAt: DateTime
  subject: String
}

type InvoiceItem {
  description: String
  id: String!

  """
  The list of product expenses linked to this invoice item, with enabled/disabled state.
  """
  linkedExpenses: [InvoiceItemExpense!]
  name: String!
  priceCents: Int!
  productId: String
  quantity: Float!
  taxPercentage: Int!
}

type InvoiceItemExpense {
  categoryId: String
  enabled: Boolean!
  expenseId: String
  name: String!
  price: Int!
}

input InvoiceItemExpenseInput {
  categoryId: String
  enabled: Boolean!
  name: String!
  price: Int!
}

input InvoiceItemInput {
  description: String

  """
  The list of product expenses linked to this invoice item, with enabled/disabled state.
  """
  linkedExpenses: [InvoiceItemExpenseInput!]
  name: String!
  priceCents: Int!
  productId: String
  quantity: Float!
  taxPercentage: Int!
}

type InvoiceLinks {
  invoiceId: String
  offerId: String
}

input InvoicePaymentInput {
  cents: Int!
  via: String!
  when: DateTime
}

"""Invoice status"""
enum InvoiceStatus {
  CANCELLED
  DRAFT
  PAID
  PAID_PARTIALLY
  SENT
}

input InvoiceSubmissionInput {
  sendType: InvoiceSubmissionType!
  when: DateTime
}

"""The way(s) the invoice was submitted"""
enum InvoiceSubmissionType {
  EMAIL
  LETTER
  MANUAL
}

type InvoiceSubmissions {
  id: String!
  submittedAt: DateTime!
  type: InvoiceSubmissionType!
}

input InvoiceTemplateInput {
  pdfStyles: String!
  pdfTemplate: String!
}

type InvoiceTemplateResult {
  pdfStyles: String!
  pdfTemplate: String!
}

"""Invoice or Offer"""
enum InvoiceType {
  INVOICE
  OFFER
}

input InvoiceWhereInput {
  search: String
  status: InvoiceStatus
  type: InvoiceType
  year: Int
}

input ListAttachmentsInput {
  expenseId: String
  inventoryId: String
  invoiceId: String
  limit: Int
  skip: Int
}

type Mutation {
  addInventoryCheck(id: String!, note: String, state: InventoryCheckState!): Boolean!
  addInventoryNote(id: String!, note: String!): Boolean!
  attachUpload(attachmentId: String!, expenseId: String, inventoryId: String, invoiceId: String): Attachment!
  confirmUpload(attachmentId: String!): Attachment!
  copyInvoice(as: InvoiceType!, id: String!): InvoiceChangedResponse!
  createCustomer(data: CustomerInput!): Customer!
  createExpense(data: ExpenseInput!): Expense!
  createInventoryItem(input: InventoryItemInput!): InventoryItem!
  createInventoryLocation(input: CreateInventoryLocationInput!): InventoryLocation!
  createInventoryType(input: CreateInventoryTypeInput!): InventoryType!
  createInvoice(customerId: String!, type: InvoiceType): Invoice!
  createProduct(data: ProductInput!): Product!
  deleteAttachment(attachmentId: String!): Boolean!
  deleteCustomer(id: String!): Customer!
  deleteExpense(id: String!): Expense!
  deleteInventoryItem(id: String!): Boolean!
  deleteInventoryLocation(id: String!): Boolean!
  deleteInventoryType(id: String!): Boolean!
  deleteInvoice(id: String!): Invoice!
  deleteInvoiceAttachmentActivity(activityId: String!, invoiceId: String!): InvoiceChangedResponse!
  deleteProduct(id: String!): Product!
  extractReceipt(input: ExtractReceiptInput!): ExtractReceiptResult!
  importInvoices(data: [InvoiceImportInput!]!): [Invoice!]!
  invoiceAddComment(attachToEmail: Boolean, attachmentId: String, comment: String, invoiceId: String!): InvoiceChangedResponse!
  invoiceAddPayment(id: String!, payment: InvoicePaymentInput!): InvoiceChangedResponse!
  invoiceCancelUnpaid(deleteExpenses: Boolean, id: String!): InvoiceChangedResponse!
  invoiceDeleteDraft(id: String!): InvoiceChangedResponse!
  invoicePdf(id: String!): String
  invoiceSend(id: String!, submission: InvoiceSubmissionInput!): InvoiceChangedResponse!
  purgeExpenses(confirm: String!): Boolean!
  purgeInvoices(confirm: String!): Boolean!
  requestUpload(fileName: String!, mimeType: String!, size: Int!): RequestAttachmentUploadUrlResult!
  sendTestEvent(data: String!, name: String!): String!
  setInvoiceActivityAttachmentEmailFlag(activityId: String!, attachToEmail: Boolean!, invoiceId: String!): InvoiceChangedResponse!
  testRenderTemplate(pdf: Boolean, styles: String!, template: String!): String!
  updateCustomer(data: CustomerInput!, id: String!): Customer!
  updateExpense(data: ExpenseInput!, id: String!): Expense!
  updateExpenseSettings(categories: [ExpenseCategoryInputType!]!, fixExpensesForImport: Boolean): [ExpenseCategoryType!]!
  updateInventoryItem(id: String!, input: InventoryItemInput!): InventoryItem!
  updateInventoryLocation(id: String!, input: UpdateInventoryLocationInput!): InventoryLocation!
  updateInventoryType(id: String!, input: UpdateInventoryTypeInput!): InventoryType!
  updateInvoice(data: InvoiceInput!, id: String!): Invoice!
  updateProduct(data: ProductInput!, id: String!): Product!
  updateSettings(data: SettingsInput!): SettingsResult!
  updateTemplate(data: InvoiceTemplateInput!): InvoiceTemplateResult!
}

type Product {
  category: String!
  createdAt: DateTime!
  description: String
  expenses: [ProductExpense!]
  id: String!
  name: String!
  notes: String
  priceCents: Int!
  taxPercentage: Int!
  unit: String
  updatedAt: DateTime!
}

type ProductExpense {
  categoryId: String
  name: String!
  price: Int!
}

input ProductExpenseInput {
  categoryId: String
  name: String!
  price: Int!
}

input ProductInput {
  category: String!
  description: String
  expenses: [ProductExpenseInput!]
  name: String!
  notes: String
  priceCents: Int!
  taxPercentage: Int!
}

input ProductWhereInput {
  category: String
  search: String
}

type Query {
  attachment(attachmentId: String!): AttachmentDownloadUrlResult!
  attachments(input: ListAttachmentsInput): [Attachment!]!
  customer(id: String!): Customer
  customers(limit: Int, skip: Int, where: String): [Customer!]!
  expense(id: String!): Expense!
  expenses(limit: Int, skip: Int, where: ExpenseWhereInput): [Expense!]!
  generateReport(where: IncomeSurplusReportWhereInput): IncomeSurplusReport!
  getContext: GetContextResult!
  inventoryItem(barcode: String, id: String): InventoryItem
  inventoryItems(limit: Int, skip: Int, where: InventoryItemWhereInput): [InventoryItem!]!
  inventoryLocation(id: String!): InventoryLocation
  inventoryLocationByBarcode(barcode: String!): InventoryLocation
  inventoryLocations(limit: Int, skip: Int, where: InventoryLocationWhereInput): [InventoryLocation!]!
  inventoryType(id: String!): InventoryType
  inventoryTypes(limit: Int, skip: Int, where: InventoryTypeWhereInput): [InventoryType!]!
  invoice(id: String!): Invoice!
  invoices(limit: Int, skip: Int, where: InvoiceWhereInput): [Invoice!]!
  loggedInUser: AuthCheckResult!
  product(id: String!): Product
  products(limit: Int, skip: Int, where: ProductWhereInput): [Product!]!
  settings: SettingsResult!
  template: InvoiceTemplateResult!
}

type RequestAttachmentUploadUrlResult {
  attachmentId: String!
  uploadUrl: String!
}

input SettingsCompanyInput {
  bankAccountHolder: String
  bankBic: String
  bankIban: String
  city: String
  email: String
  name: String
  phone: String
  street: String
  taxId: String
  vatId: String
  web: String
  zip: String
}

input SettingsInput {
  company: SettingsCompanyInput
  customerNumbersIncrementTemplate: String
  customerNumbersLast: String
  customerNumbersTemplate: String
  defaultInvoiceDueDays: Int
  defaultInvoiceFooterText: String
  emailCompanyLogo: String
  emailSubjectInvoices: String
  emailSubjectOffers: String
  emailSubjectReminder: String
  emailSubjectWarning: String
  emailTemplate: String
  invoiceCompanyLogo: String
  invoiceNumbersIncrementTemplate: String
  invoiceNumbersLast: String
  invoiceNumbersTemplate: String
  offerNumbersIncrementTemplate: String
  offerNumbersLast: String
  offerNumbersTemplate: String
  offerValidityDays: Int
  replyTo: String
  sendFrom: String
}

type SettingsResult {
  categories: [ExpenseCategoryType!]
  company: SettingsResultCompany
  customerNumbersIncrementTemplate: String
  customerNumbersLast: String
  customerNumbersTemplate: String
  defaultInvoiceDueDays: Int
  defaultInvoiceFooterText: String
  emailCompanyLogo: String
  emailSubjectInvoices: String
  emailSubjectOffers: String
  emailSubjectReminder: String
  emailSubjectWarning: String
  emailTemplate: String
  invoiceCompanyLogo: String
  invoiceNumbersIncrementTemplate: String
  invoiceNumbersLast: String
  invoiceNumbersTemplate: String
  offerNumbersIncrementTemplate: String
  offerNumbersLast: String
  offerNumbersTemplate: String
  offerValidityDays: Int
  replyTo: String
  sendFrom: String
}

type SettingsResultCompany {
  bankAccountHolder: String
  bankBic: String
  bankIban: String
  city: String
  email: String
  name: String
  phone: String
  street: String
  taxId: String
  vatId: String
  web: String
  zip: String
}

input UpdateInventoryLocationInput {
  barcode: String
  name: String
}

input UpdateInventoryTypeInput {
  checkInterval: Int
  checkType: String
  name: String
  parent: String
  properties: [String!]
}
