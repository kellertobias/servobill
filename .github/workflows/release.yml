name: Semantic Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Environment variables for the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Permissions needed for the workflow
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Linting job to ensure code quality
  lint:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Test job to run tests with coverage (requires Docker)
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Ensure Docker is available
        run: docker --version

      - name: Run tests with coverage
        run: npm run test

  # Semantic versioning and release creation
  release:
    name: Create Release
    needs: [lint, test]
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      # Expose the computed major version as an output for downstream jobs
      major_version: ${{ steps.set_major.outputs.MAJOR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Run semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          semantic_version: 22
          branches: |
            [
              'main'
            ]
          plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog
            @semantic-release/npm
            @semantic-release/github
            @semantic-release/git

      - name: Set major version for compose file
        id: set_major
        run: |
          VERSION="${{ steps.semantic.outputs.new_release_version }}"
          MAJOR="v$(echo $VERSION | cut -d'.' -f1 | sed 's/v//')"
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          sed "s/:v1/:$MAJOR/g" deploy/dockerized/docker-compose.release.yml > deploy/dockerized/docker-compose.release.tmp.yml
          mv deploy/dockerized/docker-compose.release.tmp.yml deploy/dockerized/docker-compose.release.yml

      - name: Upload release docker-compose and env.example as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-compose-and-env
          path: |
            deploy/dockerized/docker-compose.release.yml
            deploy/dockerized/env.example

  # Create GitHub release with assets
  create-release:
    name: Create GitHub Release
    needs: [release]
    runs-on: ubuntu-latest
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.release.outputs.new_release_version }}
          name: Release v${{ needs.release.outputs.new_release_version }}
          body: |
            ## What's Changed

            ${{ steps.semantic.outputs.new_release_notes }}

            ---

            **Docker images are now built and published only once per week, based on the latest release at the time of the build.**
            
            The weekly Docker image will be available after the next scheduled weekly build. Images are tagged as follows:
            - The exact release version (e.g., `v1.2.3`)
            - The latest major version (e.g., `v1`)
            - `latest`

            # The following example uses the major version output from the release job, since GitHub Actions expressions do not support .split().
            For convenience, you should use the major version tag for most deployments:
            
            ```yaml
            services:
              app:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:${{ needs.release.outputs.major_version }}
            ```

            > Note: The `latest` and version-specific tags are also available, but only updated weekly. 