name: Semantic Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Environment variables for the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Permissions needed for the workflow
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Linting job to ensure code quality
  lint:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm run test

  # Semantic versioning and release creation
  release:
    name: Create Release
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Run semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          semantic_version: 22
          branches: |
            [
              'main'
            ]
          plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog
            @semantic-release/npm
            @semantic-release/github
            @semantic-release/git

  # Docker build and push job
  docker:
    name: Build and Push Docker Images
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workers
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push App Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./App.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Workers Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./BackgroundJobs.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Create GitHub release with assets
  create-release:
    name: Create GitHub Release
    needs: [release, docker]
    runs-on: ubuntu-latest
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.release.outputs.new_release_version }}
          name: Release v${{ needs.release.outputs.new_release_version }}
          body: |
            ## What's Changed
            
            This release includes:
            - Docker images tagged with version ${{ needs.release.outputs.new_release_version }}
            - App image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:${{ needs.release.outputs.new_release_version }}`
            - Workers image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workers:${{ needs.release.outputs.new_release_version }}`
            
            ## Docker Deployment
            
            Update your docker-compose.yml to use the new tagged images:
            ```yaml
            services:
              app:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:${{ needs.release.outputs.new_release_version }}
              workers:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workers:${{ needs.release.outputs.new_release_version }}
            ```
            
            ## Quick Deployment
            
            Use the deployment script to quickly deploy this version:
            ```bash
            VERSION=${{ needs.release.outputs.new_release_version }} ./deploy/dockerized/deploy.sh
            ```
          draft: false
          prerelease: false
          files: |
            deploy/dockerized/docker-compose.prod.yml
            deploy/dockerized/deploy.sh
            deploy/dockerized/README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 